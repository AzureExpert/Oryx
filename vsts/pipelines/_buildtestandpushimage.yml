parameters:
  ascName: OryxMCR
  acrName: oryxdevmcr.azurecr.io

- script: |
    if [ -n "$(ImageFilter)" ] && [ "$(Enabled)" == "true" ]
    then
      echo "Invalid configuration."
      echo "Variable 'ImageFilter' needs to have value to run this build."
      exit 1
    fi
  displayName: 'Validate pipeline run'

- checkout: self
  clean: true

- task: ShellScript@2
  displayName: 'Build Oryx.sln'
  inputs:
    scriptPath: ./build/build-solution.sh

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection - OSS Compliance'
  inputs:
    ignoreDirectories: '$(Build.SourcesDirectory)/tests'

- task: Docker@1
  displayName: Container registry login
  inputs:
    command: login
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrName }}

- task: ShellScript@2
  displayName: 'Build build images'
  inputs:
    scriptPath: ./build/build-buildimages.sh
    args: $ImageFilter
  condition: and(succeeded(), eq(variables['ImageFilter'], 'build'))

- task: ShellScript@2
  displayName: 'Build runtime images'
  inputs:
    scriptPath: ./build/build-runtimeimages.sh
  condition: and(succeeded(), in(variables['ImageFilter'], 'node', 'python', 'php', 'dotnetcore'))

- task: ShellScript@2
  displayName: 'Test build script generator'
  inputs:
    scriptPath: ./build/test-buildscriptgenerator.sh
  condition: and(succeeded(), eq(variables['ImageFilter'], 'build'))

- task: ShellScript@2
  displayName: 'Test startup script generators'
  inputs:
    scriptPath: ./build/test-startupscriptgenerators.sh
  condition: and(succeeded(), in(variables['ImageFilter'], 'node', 'python', 'php', 'dotnetcore'))

- task: ShellScript@2
  displayName: 'Test build images'
  inputs:
    scriptPath: ./build/test-buildimages.sh
    args: skipBuildingImages
  condition: and(succeeded(), eq(variables['ImageFilter'], 'build'))

- task: ShellScript@2
  displayName: 'Test runtime images'
  inputs:
    scriptPath: ./build/test-runtimeimages.sh
    args: skipBuildingImages
  condition: and(succeeded(), in(variables['ImageFilter'], 'node', 'python', 'php', 'dotnetcore'))

- task: CopyFiles@2
  displayName: 'Copy source projects output to artifacts folder'
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    contents: 'src/**/bin/**/*.*'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    overWrite: true
    flattenFolders: true
  condition: true

- task: CopyFiles@2
  displayName: 'Copy artifacts from source repo to agent artifacts folder'
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/artifacts'
    contents: '**/*.*'
    targetFolder: $(Build.ArtifactStagingDirectory)
    overWrite: true
  condition: true

- task: PublishTestResults@2
  inputs:
    testRunner: 'xUnit'
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/testResults/*.xml'
    mergeTestResults: true
  condition: true

- task: ShellScript@2
  displayName: 'Clean up Docker containers and images'
  inputs:
    scriptPath: ./vsts/scripts/dockerCleanup.sh
  condition: true

- task: ShellScript@2
  displayName: 'Clean up Docker mounted directories'
  inputs:
    scriptPath: ./vsts/scripts/dockerArtifactsRemoval.sh
  condition: true

- task: ArchiveFiles@2
  displayName: 'Archive docker files and scripts for Oryx build and runtime images'
  inputs:
    rootFolderOrFile: images
    archiveFile: '$(Build.ArtifactStagingDirectory)/images/dockerFiles.zip'
  condition: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: true